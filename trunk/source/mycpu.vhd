-- VHDL Entity my_project_lib.mycpu.symbol
--
-- Created:
--          by - mg218.bin (cparch06.ecn.purdue.edu)
--          at - 19:59:20 01/24/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY mycpu IS
   PORT( 
      CLK           : IN     STD_LOGIC;
      nReset        : IN     std_logic;
      HALT          : OUT    STD_LOGIC;
      imemAddr      : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0);
      imemData      : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0);
      dmemAddr      : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0);
      dmemDataRead  : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0);
      dmemDataWrite : OUT    std_logic_vector (31 DOWNTO 0);
      dumpAddr      : IN     std_logic_vector (15 DOWNTO 0)
   );

-- Declarations

END mycpu ;

--
-- VHDL Architecture my_project_lib.mycpu.struct
--
-- Created:
--          by - mg218.bin (cparch06.ecn.purdue.edu)
--          at - 19:59:21 01/24/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
LIBRARY altera_mf;
USE altera_mf.all;

ARCHITECTURE struct OF mycpu IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ALUCTL      : STD_LOGIC_VECTOR(2 DOWNTO 0);
   SIGNAL ALUSRC      : STD_LOGIC;
   SIGNAL BEQ         : STD_LOGIC;
   SIGNAL BNE         : STD_LOGIC;
   SIGNAL BRANCHDECS  : STD_LOGIC;
   SIGNAL CONTROL     : STD_LOGIC;
   SIGNAL D           : STD_LOGIC_VECTOR(31 DOWNTO 0);
   SIGNAL D15_0       : STD_LOGIC_VECTOR(15 DOWNTO 0);
   SIGNAL D15_11      : STD_LOGIC_VECTOR(4 DOWNTO 0);
   SIGNAL D20_16      : STD_LOGIC_VECTOR(4 DOWNTO 0);
   SIGNAL D25_0       : STD_LOGIC_VECTOR(25 DOWNTO 0);
   SIGNAL D25_21      : STD_LOGIC_VECTOR(4 DOWNTO 0);
   SIGNAL D31_26      : STD_LOGIC_VECTOR(5 DOWNTO 0);
   SIGNAL D5_0        : STD_LOGIC_VECTOR(5 DOWNTO 0);
   SIGNAL DELAY       : STD_LOGIC;
   SIGNAL DOUT2       : STD_LOGIC_VECTOR(15 DOWNTO 0);
   SIGNAL DOUT3       : STD_LOGIC_VECTOR(15 DOWNTO 0);
   SIGNAL EXTSIGN     : STD_LOGIC;
   SIGNAL JAL_ADDRESS : STD_LOGIC_VECTOR(31 DOWNTO 0);
   SIGNAL JREG        : STD_LOGIC;
   SIGNAL JUMP        : STD_LOGIC;
   SIGNAL LINK        : STD_LOGIC;
   SIGNAL MEMTOREG    : STD_LOGIC;
   SIGNAL MEMWRITE    : STD_LOGIC;
   SIGNAL POUT        : STD_LOGIC_VECTOR(31 DOWNTO 0);
   SIGNAL QOUT        : STD_LOGIC_VECTOR(31 DOWNTO 0);
   SIGNAL REGDST      : STD_LOGIC;
   SIGNAL REGWRITE    : STD_LOGIC;
   SIGNAL RESET       : STD_LOGIC;
   SIGNAL ROUT        : STD_LOGIC_VECTOR(31 DOWNTO 0);
   SIGNAL ROUT1       : STD_LOGIC_VECTOR(4 DOWNTO 0);
   SIGNAL SETU        : STD_LOGIC_VECTOR(1 DOWNTO 0);
   SIGNAL TOUT        : STD_LOGIC_VECTOR(31 DOWNTO 0);
   SIGNAL UPPER       : STD_LOGIC;
   SIGNAL VAL         : STD_LOGIC_VECTOR(31 DOWNTO 0);
   SIGNAL W           : STD_LOGIC_VECTOR(31 DOWNTO 0);
   SIGNAL ZERO        : STD_LOGIC;
   SIGNAL cAddr       : std_logic_vector(15 DOWNTO 0);
   SIGNAL dout        : std_logic;
   SIGNAL dout1       : std_logic;
   SIGNAL rdat1       : std_logic_vector(31 DOWNTO 0);

   -- Implicit buffer signal declarations
   SIGNAL HALT_internal          : STD_LOGIC;
   SIGNAL dmemAddr_internal      : STD_LOGIC_VECTOR (31 DOWNTO 0);
   SIGNAL dmemDataRead_internal  : STD_LOGIC_VECTOR (31 DOWNTO 0);
   SIGNAL dmemDataWrite_internal : std_logic_vector (31 DOWNTO 0);
   SIGNAL imemAddr_internal      : STD_LOGIC_VECTOR (31 DOWNTO 0);
   SIGNAL imemData_internal      : STD_LOGIC_VECTOR (31 DOWNTO 0);


   -- Component Declarations
   COMPONENT alu
   PORT (
      A        : IN     STD_LOGIC_VECTOR (31 DOWNTO 0);
      B        : IN     STD_LOGIC_VECTOR (31 DOWNTO 0);
      OPCODE   : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      NEGATIVE : OUT    STD_LOGIC;
      OUTPUT   : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0);
      OVERFLOW : OUT    STD_LOGIC;
      ZERO     : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT aluSrcMux
   PORT (
      ALUSRC : IN     STD_LOGIC;
      R0     : IN     STD_LOGIC_VECTOR (31 DOWNTO 0);
      R1     : IN     STD_LOGIC_VECTOR (31 DOWNTO 0);
      ROUT   : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT branchMux
   PORT (
      BEQ        : IN     STD_LOGIC;
      BNE        : IN     STD_LOGIC;
      ZERO       : IN     STD_LOGIC;
      BRANCHDECS : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT clu
   PORT (
      LCTL     : IN     STD_LOGIC_VECTOR (5 DOWNTO 0);
      QIN      : IN     STD_LOGIC_VECTOR (5 DOWNTO 0);
      ALUCTL   : OUT    STD_LOGIC_VECTOR (2 DOWNTO 0);
      ALUSRC   : OUT    STD_LOGIC;
      BEQ      : OUT    STD_LOGIC;
      BNE      : OUT    STD_LOGIC;
      EXTSIGN  : OUT    STD_LOGIC;
      HALT     : OUT    STD_LOGIC;
      JREG     : OUT    STD_LOGIC;
      JUMP     : OUT    STD_LOGIC;
      LINK     : OUT    STD_LOGIC;
      MEMTOREG : OUT    STD_LOGIC;
      MEMWRITE : OUT    STD_LOGIC;
      REGDST   : OUT    STD_LOGIC;
      REGWRITE : OUT    STD_LOGIC;
      SETU     : OUT    STD_LOGIC_VECTOR (1 DOWNTO 0);
      UPPER    : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT delayer
   PORT (
      CIN   : IN     STD_LOGIC_VECTOR (5 DOWNTO 0);
      CLK   : IN     STD_LOGIC;
      RESET : IN     STD_LOGIC;
      DELAY : OUT    STD_LOGIC
   );
   END COMPONENT;
   COMPONENT extender
   PORT (
      EXTENDSIGN : IN     STD_LOGIC;
      PIN        : IN     STD_LOGIC_VECTOR (15 DOWNTO 0);
      POUT       : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT halfSplitter
   PORT (
      DIN  : IN     STD_LOGIC_VECTOR (31 DOWNTO 0);
      DOUT : OUT    STD_LOGIC_VECTOR (15 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT loadUpperMux
   PORT (
      Q     : IN     STD_LOGIC_VECTOR (15 DOWNTO 0);
      UPPER : IN     STD_LOGIC;
      W     : IN     STD_LOGIC_VECTOR (31 DOWNTO 0);
      QOUT  : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT memToRegMux
   PORT (
      JAL      : IN     STD_LOGIC_VECTOR (31 DOWNTO 0);
      LINK     : IN     STD_LOGIC;
      MEMTOREG : IN     STD_LOGIC;
      R0       : IN     STD_LOGIC_VECTOR (31 DOWNTO 0);
      R1       : IN     STD_LOGIC_VECTOR (31 DOWNTO 0);
      ROUT     : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT pcpack
   PORT (
      BRANCHDECS    : IN     STD_LOGIC;
      CLK           : IN     STD_LOGIC;
      HALT          : IN     STD_LOGIC;
      JREG          : IN     STD_LOGIC;
      JUMP          : IN     STD_LOGIC;
      JUMP_ADDRESS  : IN     STD_LOGIC_VECTOR (25 DOWNTO 0);
      JUMP_REGISTER : IN     STD_LOGIC_VECTOR (31 DOWNTO 0);
      MEMWAIT       : IN     STD_LOGIC;
      RESET         : IN     STD_LOGIC;
      SIGN_EXTENDED : IN     STD_LOGIC_VECTOR (31 DOWNTO 0);
      JAL_ADDRESS   : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0);
      OUT_PC        : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT ramd
   PORT (
      address : IN     STD_LOGIC_VECTOR (15 DOWNTO 0);
      clock   : IN     STD_LOGIC;
      data    : IN     STD_LOGIC_VECTOR (31 DOWNTO 0);
      wren    : IN     STD_LOGIC;
      q       : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT rami
   PORT (
      address : IN     STD_LOGIC_VECTOR (15 DOWNTO 0);
      clock   : IN     STD_LOGIC;
      data    : IN     STD_LOGIC_VECTOR (31 DOWNTO 0);
      wren    : IN     STD_LOGIC;
      q       : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT regMux
   PORT (
      LINK   : IN     STD_LOGIC;
      R0     : IN     STD_LOGIC_VECTOR (4 DOWNTO 0);
      R1     : IN     STD_LOGIC_VECTOR (4 DOWNTO 0);
      REGDST : IN     STD_LOGIC;
      ROUT   : OUT    STD_LOGIC_VECTOR (4 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT registerFile
   PORT (
      clk    : IN     std_logic;
      nReset : IN     std_logic;
      rsel1  : IN     std_logic_vector (4 DOWNTO 0);
      rsel2  : IN     std_logic_vector (4 DOWNTO 0);
      wdat   : IN     std_logic_vector (31 DOWNTO 0);
      wen    : IN     std_logic;
      wsel   : IN     std_logic_vector (4 DOWNTO 0);
      rdat1  : OUT    std_logic_vector (31 DOWNTO 0);
      rdat2  : OUT    std_logic_vector (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT setWriteMux
   PORT (
      ALU     : IN     STD_LOGIC_VECTOR (31 DOWNTO 0);
      CONTROL : IN     STD_LOGIC;
      SLT     : IN     STD_LOGIC_VECTOR (31 DOWNTO 0);
      D       : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT setterMux
   PORT (
      A       : IN     STD_LOGIC_VECTOR (31 DOWNTO 0);
      B       : IN     STD_LOGIC_VECTOR (31 DOWNTO 0);
      SETU    : IN     STD_LOGIC_VECTOR (1 DOWNTO 0);
      CONTROL : OUT    STD_LOGIC;
      VAL     : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT splitter
   PORT (
      Q      : IN     STD_LOGIC_VECTOR (31 DOWNTO 0);
      D15_0  : OUT    STD_LOGIC_VECTOR (15 DOWNTO 0);
      D15_11 : OUT    STD_LOGIC_VECTOR (4 DOWNTO 0);
      D20_16 : OUT    STD_LOGIC_VECTOR (4 DOWNTO 0);
      D25_0  : OUT    STD_LOGIC_VECTOR (25 DOWNTO 0);
      D25_21 : OUT    STD_LOGIC_VECTOR (4 DOWNTO 0);
      D31_26 : OUT    STD_LOGIC_VECTOR (5 DOWNTO 0);
      D5_0   : OUT    STD_LOGIC_VECTOR (5 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT zeroGen
   PORT (
      TOUT : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0)
   );
   END COMPONENT;


BEGIN

   -- ModuleWare code(v1.9) for instance 'U_16' of 'gnd'
   dout1 <= '0';

   -- ModuleWare code(v1.9) for instance 'U_21' of 'mux'
   u_21combo_proc: PROCESS(DOUT3, dumpAddr, HALT_internal)
   BEGIN
      CASE HALT_internal IS
      WHEN '0' => cAddr <= DOUT3;
      WHEN '1' => cAddr <= dumpAddr;
      WHEN OTHERS => cAddr <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_21combo_proc;

   -- ModuleWare code(v1.9) for instance 'U_15' of 'pnot'
   u_15seq_proc: PROCESS (RESET)
      VARIABLE temp_din : std_logic;
   BEGIN
      temp_din := NOT(RESET);
      IF (temp_din ='1' ) THEN
         dout <= '1';
      ELSIF (temp_din ='H' ) THEN
         dout <= '1';
      ELSIF (temp_din ='0' ) THEN
         dout <= '0';
      ELSIF (temp_din ='L' ) THEN
         dout <= '0';
      ELSIF (temp_din ='U' ) THEN
         dout <= 'U';
      ELSIF (temp_din ='X' ) THEN
         dout <= 'X';
      ELSIF (temp_din ='Z' ) THEN
         dout <= 'X';
      END IF;
   END PROCESS u_15seq_proc;

   -- ModuleWare code(v1.9) for instance 'U_17' of 'pnot'
   u_17seq_proc: PROCESS (nReset)
      VARIABLE temp_din : std_logic;
   BEGIN
      temp_din := NOT(nReset);
      IF (temp_din ='1' ) THEN
         RESET <= '1';
      ELSIF (temp_din ='H' ) THEN
         RESET <= '1';
      ELSIF (temp_din ='0' ) THEN
         RESET <= '0';
      ELSIF (temp_din ='L' ) THEN
         RESET <= '0';
      ELSIF (temp_din ='U' ) THEN
         RESET <= 'U';
      ELSIF (temp_din ='X' ) THEN
         RESET <= 'X';
      ELSIF (temp_din ='Z' ) THEN
         RESET <= 'X';
      END IF;
   END PROCESS u_17seq_proc;

   -- Instance port mappings.
   U_0 : alu
      PORT MAP (
         OPCODE   => ALUCTL,
         A        => rdat1,
         B        => ROUT,
         OUTPUT   => dmemAddr_internal,
         NEGATIVE => OPEN,
         OVERFLOW => OPEN,
         ZERO     => ZERO
      );
   U_1 : aluSrcMux
      PORT MAP (
         R0     => POUT,
         R1     => dmemDataWrite_internal,
         ALUSRC => ALUSRC,
         ROUT   => ROUT
      );
   U_2 : branchMux
      PORT MAP (
         BEQ        => BEQ,
         BNE        => BNE,
         ZERO       => ZERO,
         BRANCHDECS => BRANCHDECS
      );
   U_3 : clu
      PORT MAP (
         QIN      => D31_26,
         LCTL     => D5_0,
         REGDST   => REGDST,
         EXTSIGN  => EXTSIGN,
         MEMTOREG => MEMTOREG,
         ALUSRC   => ALUSRC,
         REGWRITE => REGWRITE,
         MEMWRITE => MEMWRITE,
         HALT     => HALT_internal,
         JREG     => JREG,
         JUMP     => JUMP,
         LINK     => LINK,
         BEQ      => BEQ,
         BNE      => BNE,
         UPPER    => UPPER,
         SETU     => SETU,
         ALUCTL   => ALUCTL
      );
   U_22 : delayer
      PORT MAP (
         CLK   => CLK,
         RESET => RESET,
         CIN   => D31_26,
         DELAY => DELAY
      );
   U_4 : extender
      PORT MAP (
         PIN        => D15_0,
         EXTENDSIGN => EXTSIGN,
         POUT       => POUT
      );
   U_19 : halfSplitter
      PORT MAP (
         DIN  => dmemAddr_internal,
         DOUT => DOUT3
      );
   U_20 : halfSplitter
      PORT MAP (
         DIN  => imemAddr_internal,
         DOUT => DOUT2
      );
   U_5 : loadUpperMux
      PORT MAP (
         Q     => D15_0,
         W     => W,
         UPPER => UPPER,
         QOUT  => QOUT
      );
   U_6 : memToRegMux
      PORT MAP (
         R0       => D,
         R1       => dmemDataRead_internal,
         JAL      => JAL_ADDRESS,
         MEMTOREG => MEMTOREG,
         LINK     => LINK,
         ROUT     => W
      );
   U_7 : pcpack
      PORT MAP (
         CLK           => CLK,
         RESET         => RESET,
         HALT          => HALT_internal,
         JREG          => JREG,
         BRANCHDECS    => BRANCHDECS,
         JUMP          => JUMP,
         MEMWAIT       => DELAY,
         JUMP_ADDRESS  => D25_0,
         JUMP_REGISTER => rdat1,
         SIGN_EXTENDED => POUT,
         JAL_ADDRESS   => JAL_ADDRESS,
         OUT_PC        => imemAddr_internal
      );
   U_12 : ramd
      PORT MAP (
         address => cAddr,
         clock   => CLK,
         data    => dmemDataWrite_internal,
         wren    => MEMWRITE,
         q       => dmemDataRead_internal
      );
   U_13 : rami
      PORT MAP (
         address => DOUT2,
         clock   => CLK,
         data    => TOUT,
         wren    => dout1,
         q       => imemData_internal
      );
   U_9 : regMux
      PORT MAP (
         R0     => D20_16,
         R1     => D15_11,
         REGDST => REGDST,
         LINK   => LINK,
         ROUT   => ROUT1
      );
   U_8 : registerFile
      PORT MAP (
         wdat   => QOUT,
         wsel   => ROUT1,
         wen    => REGWRITE,
         clk    => CLK,
         nReset => dout,
         rsel1  => D25_21,
         rsel2  => D20_16,
         rdat1  => rdat1,
         rdat2  => dmemDataWrite_internal
      );
   U_11 : setWriteMux
      PORT MAP (
         ALU     => dmemAddr_internal,
         SLT     => VAL,
         CONTROL => CONTROL,
         D       => D
      );
   U_10 : setterMux
      PORT MAP (
         SETU    => SETU,
         A       => rdat1,
         B       => dmemDataWrite_internal,
         VAL     => VAL,
         CONTROL => CONTROL
      );
   U_14 : splitter
      PORT MAP (
         Q      => imemData_internal,
         D31_26 => D31_26,
         D25_21 => D25_21,
         D20_16 => D20_16,
         D15_11 => D15_11,
         D15_0  => D15_0,
         D5_0   => D5_0,
         D25_0  => D25_0
      );
   U_18 : zeroGen
      PORT MAP (
         TOUT => TOUT
      );

   -- Implicit buffered output assignments
   HALT          <= HALT_internal;
   dmemAddr      <= dmemAddr_internal;
   dmemDataRead  <= dmemDataRead_internal;
   dmemDataWrite <= dmemDataWrite_internal;
   imemAddr      <= imemAddr_internal;
   imemData      <= imemData_internal;

END struct;
